// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// database tables

// @id indicates this property as primary key
// @default is a default value; in this case, it will use the autoincrement function to generate an integer
// @unique indicates that this value cannot be repeated between records (rows)
// post Post[] indicates a 1:N relationship between User and Post
// same for comment Comment[]
model User {
  id       Int       @id @default(autoincrement())
  name     String
  username String    @unique
  avatar   String
  post     Post[]
  comment  Comment[]
}

// @updatedAt automatically updates the time when a record is updated
// @relation configures foreign keys to indicate a connection between tables
model Post {
  id        Int       @id @default(autoincrement())
  cover     String
  title     String
  slug      String    @unique
  body      String
  markdown  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Int       @default(0)
}

// A comment may have children comments (replies to a comment).
// Comment will have two fields of type Comment for the same relation,
// so in order to indicate a self relation, we add a name to the
// relation.
// Adding "?" indicates that a field is optional
model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  postId    Int
  post      Post      @relation(fields: [postId], references: [id])
  // optional parentId if this comment is referencing another
  // comment (a reply to a parent comment)
  parentId  Int?
  parent    Comment?  @relation("parentComment", fields: [parentId], references: [id])
  children  Comment[] @relation("parentComment")
}